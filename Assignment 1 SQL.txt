Questions (DDL + DML)
Write SQL to create the three tables: categories, suppliers, and products.

(a) Retrieve a list of all products with their category name and supplier name.
 ANS:
 SELECT p.product_name, c.category_name, s.supplier_name
FROM products p
JOIN categories c ON p.category_id = c.category_id
JOIN suppliers s ON p.supplier_id = s.supplier_id;

(b) Find all products where stock quantity is below 5.
ANS:
SELECT* FROM PRODUCTS WHERE STOCK_QUANTIY<5;

(c) Add a new column discount_percent to the products table with a default value of 0.
ANS: 
ALTER TABLE PRODUCTS
ADD COLUMN discount_percent NUMERIC(5,2) DEFAULT 0;

(d) Write a query to reduce the price of all products in the "Electronics" category by 15%.
ANS:
UPDATE PRODUCTS P
JOIN CATEGORIES C ON P.CATEGORY_ID = C.CATEGORY_ID
SET P.PRICE = 0.85*P.PRICE
AND C.CATEGORY_NAME = 'ELECTRONICS';
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Questions (Aggregate, Filtering, Grouping, Sorting)

(e) Find the total number of products available in the products table.
ANS: 
SELECT COUNT(*)AS TOTAL_PRODUCTS FROM PRODUCTS;

(f) Find the average price of all products.
ANS:
SELECT AVG(PRICE) AS AVERAGE_PRICE FROM PRODUCTS;

(g) Find the maximum and minimum price of products in the "Electronics" category.
ANS:
SELECT MAX(PRICE) AS MAXIMUM_PRICE, MIN(PRICE) AS MINIMUM_PRICE 
FROM PRODUCTS
WHERE CATEGORY_ID =  (SELECT category_id FROM categories WHERE category_name = 'Electronics');

(h) List categories along with the count of products in each category.
ANS:
SELECT C.CATEGORIES_NAME AS NAME , COUNT(P.PRODUCT_ID) AS NUMBER
FROM CATEGORIES C 
LEFT JOIN  PRODUCTS P ON C.CATEGORY_ID = P.CATEGORY_ID
GROUP BY C.CATEGORY_NAME;

(i) List suppliers who supply products priced between $50 and $200.
ANS:
SELECT DISTINCT s.supplier_name
FROM suppliers s
JOIN products p ON s.supplier_id = p.supplier_id
WHERE p.price BETWEEN 50 AND 200;

(j) Find all products whose category_id is in the list of category IDs (1, 3).
ANS: SELECT * P.PRODUCTS_NAME
FROM PRODUCTS P
WHERE CATEGORY_ID IN (1,3);

(k) Find the total stock quantity per category but only for categories having more than 1 product.
ANS:
SELECT C.CATEGORY_NAME, SUM(P.STOCK_QUANTITY) AS QUANITY 
FROM PRODUCTS P 
JOIN CATEGORIES C ON P.CATEGORY_ID = C.CATEGORY _ID
GROUP BY C.CATEGORY_NAME
HAVING  COUNT(P.PRODUCT_ID) >1;

(l) List all products grouped by supplier and show the average price per supplier, but only for suppliers whose average product price is greater than $100.
ANS: SELECT P.PRODUCT_NAME , AVG(P.PRICE) AS PRICE
FROM PRODUCTS P 
JOIN SUPPLIER S ON P.SUPPLIER_ID = S.SUPPLIER_ID 
GROUP BY P.SUPPLIER_NAME 
HAVING AVG(P.PRICE) > 100;

(m) List all products sorted by price in descending order.
ANS:
SELECT * FROM PRODUCTS ORDER BY PRICE DESC;

(n) List the total value of stock (price * stock_quantity) for each category, ordered by total value from highest to lowest.
ANS: 
SELECT C.CATEGORY_NAME , SUM( p.price * p.stock_quantity )AS TOTAL_VALUE
FROM PRODUCTS P
JOIN CATEGORIES C ON P.CATEGORY_ID = C.CATEGORY_ID
GROUP BY C.CATEGORY_NAME
ORDER BY TOTAL_VALUE DESC;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10 Questions on JOINS

(a) Write a query to list all products with their corresponding category name using an INNER JOIN.
ANS:
SELECT P.PRODUCT_NAME , C.CATEGORY_NAME
FROM PRODUCTS P
JOIN CATEGORIES C ON P.CATEGORY_ID = C.CATEGORY_ID;


(b) Write a query to list all products with their category name, including products that do not belong to any category (LEFT JOIN).
ANS:
SELECT P.PRODUCT_NAME  , C.CATEGORY_NAME 
FROM PRODUCTS P
LEFT JOIN CATEGORIES C ON P.CATEGORY_ID = C.CATEGORY_ID; 

(c) Write a query to list all categories and the count of products in each category, including categories with no products (LEFT JOIN and GROUP BY).
ANS:
SELECT C.CATEGORY_NAME , COUNT(P.PRODUCT_ID) AS PRODUCT_COUNT
FROM CATEGORIES C 
LEFT JOIN PRODUCTS P ON P.CATEGORY_ID = C.CATEGORY_ID 
GRPUP BY C.CATEGORY_NAME;

(d) Write a query to list all products along with their supplier names, including products that have no supplier assigned (LEFT JOIN).
ANS:
SELECT P.PRODUCT_NAME , S.SUPPLIER_NAME F
FROM PRODUCTS P
LEFT JOIN SUPPLIER S ON P.SUPPLIER_ID = S.SUPPLIER_ID;

(e) Write a query to list all suppliers and the products they supply, including suppliers who supply no products (RIGHT JOIN).
ANS:
SELECT P.PRODUCT_NAME , S.SUPPLIER_NAME F
FROM PRODUCTS P
RIGHT JOIN SUPPLIER S ON P.SUPPLIER_ID = S.SUPPLIER_ID;

(f) Write a query to find all products that do not have a supplier assigned.
ANS:
SELECT * FROM PRODUCTS WHERE SUPPLIER_ID IS NULL;

(g) Write a query to get all products with their category name and supplier name using multiple JOINs (join products with both categories and suppliers).
ANS:
SELECT P.PRODUCT_NAME , C.CATEGORY_NAME , S.SUPPLIER_NAME
FROM PRODUCTS P
JOIN CATEGORIES C ON P.CATEGORY_ID = C.CATEGORY_ID
JOIN SUPPLIERS S ON P.SUPPLIER_ID = S.SUPPLIER_ID; 

(h) Write a query to get a list of all suppliers and categories, even if there are no products linking them (FULL OUTER JOIN between suppliers and categories).
ANS:
SELECT s.supplier_name, c.category_name
FROM suppliers s
CROSS JOIN categories c;

(i) Write a query to find products where the supplier's contact email is not null using a join.
ANS:
SELECT p.*
FROM products p
JOIN suppliers s ON p.supplier_id = s.supplier_id
WHERE s.contact_email IS NOT NULL;

(j) Write a query to find categories that have products supplied by supplier named 'Global Goods'.
ANS:
SELECT DISTINCT c.category_name
FROM categories c
JOIN products p ON c.category_id = p.category_id
JOIN suppliers s ON p.supplier_id = s.supplier_id
WHERE s.supplier_name = 'Global Goods';
